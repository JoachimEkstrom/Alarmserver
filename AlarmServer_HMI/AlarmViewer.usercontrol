<div id="UserControl2" data-tchmi-type="TcHmi.Controls.System.TcHmiUserControl" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width="1700" data-tchmi-height="900" data-tchmi-width-unit="px" data-tchmi-height-unit="px" data-tchmi-creator-viewport-width="1920" data-tchmi-creator-viewport-height="1080" data-tchmi-left-unit="px" data-tchmi-top-unit="px" data-tchmi-right-unit="px" data-tchmi-bottom-unit="px">

<div id="TcHmiTextbox_2" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextbox" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="282" data-tchmi-left-unit="px" data-tchmi-top="866" data-tchmi-top-unit="px" data-tchmi-width="160" data-tchmi-width-unit="px" data-tchmi-right-unit="px" data-tchmi-bottom-unit="px" data-tchmi-text="%pp%AlarmData::iValueChanged%/pp%">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>


<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiTextbox_2.onTextChanged",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "getData();\nconsole.log(\"Value changed, updating the alarm log\");"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>
</div>

<div id="TcHmiButton_4" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="506" data-tchmi-left-unit="px" data-tchmi-text="Ack" data-tchmi-top="830" data-tchmi-top-unit="px" data-tchmi-width="110" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-right-unit="px" data-tchmi-bottom-unit="px">


<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_4.onPressed",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%pp%AlarmData::bAckAlarm%/pp%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:general#/definitions/BOOL",
          "value": true
        },
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>

<div id="TcHmiButton_5" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="642" data-tchmi-left-unit="px" data-tchmi-text="Ack ALL" data-tchmi-top="830" data-tchmi-top-unit="px" data-tchmi-width="110" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-right-unit="px" data-tchmi-bottom-unit="px">


<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_5.onPressed",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%pp%AlarmData::bAckAllAlarms%/pp%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:general#/definitions/BOOL",
          "value": true
        },
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>

<div id="TcHmiTextblock_1" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="282" data-tchmi-left-unit="px" data-tchmi-text="Selected row" data-tchmi-top="794" data-tchmi-top-unit="px" data-tchmi-width="160" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-right-unit="px" data-tchmi-bottom-unit="px">

</div>

<div id="TcHmiTextbox_3" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextbox" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="282" data-tchmi-left-unit="px" data-tchmi-top="830" data-tchmi-top-unit="px" data-tchmi-width="160" data-tchmi-width-unit="px" data-tchmi-right-unit="px" data-tchmi-bottom-unit="px"  data-tchmi-text="%s%PLC1.MAIN.Alarms::irowSelected%/s%">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>

</div>

<div id="TcHmiHtmlHost_1" data-tchmi-type="TcHmi.Controls.System.TcHmiHtmlHost" data-tchmi-height="750" data-tchmi-height-unit="px" data-tchmi-left="0" data-tchmi-left-unit="px" data-tchmi-top="0" data-tchmi-top-unit="px" data-tchmi-width="1700" data-tchmi-width-unit="px" data-tchmi-right-unit="px" data-tchmi-bottom-unit="px">
    <div>
        <table id="mytable">
            <thead>
                <tr>
                    <th id="hName">Alarm Name</th>
                    <th id="hisActive">isActive</th>
                    <th id="hisAcknowledged">isAcknowledged</th>
                    <th id="hAlarmText">AlarmText</th>
                    <th id="hStartTime">StartTime</th>
                    <th id="hAckTime">AckTime</th>
                    <th id="hRepeatCount">RepeatCount</th>
                </tr>
            </thead>
            <tbody id="tbody">
            </tbody>
        </table>
    </div>
    <script>
        let alarms = []
        let dbalarms = Array(2000)
        let isSelected
        let isSelectedOld
        function getData() {
            TcHmi.Symbol.readEx2('%pp%AlarmData::AlarmData%/pp%', function (data) {
                if (data.error === TcHmi.Errors.NONE) {
                    // Handle result value... 
                    //console.log(data.value)
                    alarms = data.value;
                    writeDb();
                    updateAlarmList(alarms);
                }

            })
        }

        async function writeDb() {
            let i = 0;
            let update = false
            let dbArr = []
            let t0 = performance.now();
            //for (let i = 0; i < alarms.length; i++) {
            for (const alarm of alarms) {
                if ((JSON.stringify(alarm) !== JSON.stringify(dbalarms[i])) && alarm.bIsUsed) {
                    console.log("Found stuff for DB")
                    dbArr.push(alarm)
                    if (alarm.tClearedTime !== "") {
                        alarm.bIsUsed = false
                        alarm.sName = ""
                        alarm.bIsActive = 0
                        alarm.bIsAcknowledged = 0
                        alarm.sAlarmText = ""
                        alarm.tActiveStartTime = ""
                        alarm.tAcknowlegedTime = ""
                        alarm.tClearedTime = ""
                        alarm.uiRepeatCount = 0
                        if (!update) {
                            update = true
                        }
                    }
                    
                }
                // A http request body cannot be to large, if more than 250 event send these as a first chunk. 
                if (dbArr.length > 250) {
                    await postData('http://127.0.0.1:4000/addrows', dbArr/*{ sName: alarm.sName, bIsActive: alarm.bIsActive, bIsAcknowledged: alarm.bIsAcknowledged, sAlarmText: alarm.sAlarmText, tActiveStartTime: alarm.tActiveStartTime, tAcknowlegedTime: alarm.tAcknowlegedTime, tClearedTime: alarm.tClearedTime, uiRepeatCount: alarm.uiRepeatCount }*/)
                        .then(data => {
                            dbArr = []
                        })
                }
                i++
            }

            await postData('http://127.0.0.1:4000/addrows', dbArr/*{ sName: alarm.sName, bIsActive: alarm.bIsActive, bIsAcknowledged: alarm.bIsAcknowledged, sAlarmText: alarm.sAlarmText, tActiveStartTime: alarm.tActiveStartTime, tAcknowlegedTime: alarm.tAcknowlegedTime, tClearedTime: alarm.tClearedTime, uiRepeatCount: alarm.uiRepeatCount }*/)
                .then(data => {
                    //console.log(data);
                })

            dbalarms = alarms

            let t1 = performance.now();
            console.log(`Update Database took ${t1 - t0} milliseconds.`);

            if (update) {
                TcHmi.Symbol.writeEx('%pp%AlarmData::AlarmData%/pp%', alarms, function (data) {
                    if (data.error === TcHmi.Errors.NONE) {
                        // Handle success... 
                        console.log("OK")
                    } else {
                        // Handle error... 
                        console.log("NOTOK")
                    }
                });


                updateAlarmList(alarms);
            }
        }

        function updateAlarmList(alarms) {
            let t0 = performance.now();
            console.log("Updating alarm list")

           
            let table = document.getElementById('mytable')
            let oldTbody = document.getElementById('tbody') 
            table.removeChild(oldTbody) // Remove old alarms
            let newTbody = document.createElement('tbody')
            newTbody.id = 'tbody'
            table.appendChild(newTbody);


            for (let i = 0; i < alarms.length; i++) {
                if (alarms[i].bIsUsed) {
                    let tr = document.createElement('tr')
                    tr.addEventListener('click', function () { selectRow(this) });

                    let sName = document.createElement('td')
                    sName.innerHTML = alarms[i].sName;
                    sName.className = "sName";
                    tr.appendChild(sName)

                    let isActive = document.createElement('td')
                    isActive.innerHTML = alarms[i].bIsActive;
                    isActive.className = "isActive";
                    tr.appendChild(isActive)

                    let isAck = document.createElement('td')
                    isAck.innerHTML = alarms[i].bIsAcknowledged;
                    isAck.className = "isAck";
                    tr.appendChild(isAck)

                    let sAlarmText = document.createElement('td')
                    sAlarmText.innerHTML = alarms[i].sAlarmText;
                    sAlarmText.className = "sAlarmText";
                    tr.appendChild(sAlarmText)

                    let tActiveStartTime = document.createElement('td')
                    tActiveStartTime.innerHTML = alarms[i].tActiveStartTime.slice(0, 19);
                    tActiveStartTime.className = "tActiveStartTime";
                    tr.appendChild(tActiveStartTime)

                    let tAcknowlegedTime = document.createElement('td')
                    tAcknowlegedTime.innerHTML = alarms[i].tAcknowlegedTime.slice(0, 19);
                    tAcknowlegedTime.className = "tAcknowlegedTime";
                    tr.appendChild(tAcknowlegedTime)

                    let uiRepeatCount = document.createElement('td')
                    uiRepeatCount.innerHTML = alarms[i].uiRepeatCount;
                    uiRepeatCount.className = "uiRepeatCount";
                    tr.appendChild(uiRepeatCount)

                    if (alarms[i].bIsActive && !alarms[i].bIsAcknowledged) {
                        tr.style.backgroundColor = "red";
                    } else if (alarms[i].bIsActive && alarms[i].bIsAcknowledged) {
                        tr.style.backgroundColor = "yellow";
                    }
                    if (i === isSelected && isSelectedOld !== isSelected) {
                        tr.style.backgroundColor = "pink";
                        isSelectedOld = isSelected
                    }
                            
                    let tbody = document.getElementById('tbody');
                    tbody.appendChild(tr)
                }

            }
            let t1 = performance.now();
            console.log(`Update AlarmTable took ${t1 - t0} milliseconds.`);
        }


        function selectRow(x) {
            //console.log(x);
            TcHmi.Symbol.writeEx('%pp%AlarmData::irowSelected%/pp%', x.rowIndex - 1, function (data) {
                if (data.error === TcHmi.Errors.NONE) {
                    // Handle success... 
                    console.log("OK")
                    isSelected = x.rowIndex - 1
                   //x.style.backgroundColor = "pink";
                    updateAlarmList(alarms);
                    var rows = document.querySelectorAll('#mytable tr');

                    // line is zero-based
                    // line is the row number that you want to see into view after scroll    
                    rows[isSelected].scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });
                } else {
                    // Handle error... 
                    console.log("NOTOK")
                }
            });
        }

        // Example POST method implementation:
        async function postData(url = '', data = {}) {
            // Default options are marked with *
            const response = await fetch(url, {
                method: 'POST', // *GET, POST, PUT, DELETE, etc.
                mode: 'cors', // no-cors, *cors, same-origin
                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
                credentials: 'same-origin', // include, *same-origin, omit
                headers: {
                    'Content-Type': 'application/json'
                    // 'Content-Type': 'application/x-www-form-urlencoded',
                },
                redirect: 'follow', // manual, *follow, error
                referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                body: JSON.stringify(data) // body data type must match "Content-Type" header
            });
            //return response.json(); // parses JSON response into native JavaScript objects
            return response.status
        }



    </script>
    <style>
        table {
            width: 1700px;
            background-color: #ffffff;
            border-collapse: collapse;
            table-layout: auto;
            border-spacing: 0;
            
        }
        thead {
            display: block;
            float: left;
            position: sticky;
            top: 0px;
            z-index: 100;
            background-color: #ffffff;
        }

        tbody {
            height: 750px; /* Just for the demo          */
            overflow-y: scroll; /* Trigger vertical scroll    */
            overflow-x: hidden; /* Hide the horizontal scroll */
            display: block;
            float: left;
        }

        th {
            height: 40px;
            border: 1px solid black;
            text-align: center;
            vertical-align: central;
            font-size: 16px;
            padding: 0;
            position: sticky;
            top: 0px;
        }

        td {
            height: 30px;
            border: 1px solid black;
            text-align: center;
            vertical-align: central;
            font-size: 16px;
            padding: 0;  
        }
        .sName, #hName {
            width: 300px;
        }
        .isActive, #hisActive {
            width: 80px;
        }
        .isAck, #hisAcknowledged {
            width: 120px;
        }
        .sAlarmText, #hAlarmText {
            width: 780px;
        }
        .tActiveStartTime, #hStartTime {
            width: 150px;
        }
        .tAcknowlegedTime, #hAckTime {
            width: 150px;
        }
        .uiRepeatCount {
            width: 96px;
        }
        #hRepeatCount {
            width: 112px;
        } 

    </style>


</div>

<div id="TcHmiButton_6" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="769" data-tchmi-left-unit="px" data-tchmi-text="Clear ALL" data-tchmi-top="830" data-tchmi-top-unit="px" data-tchmi-width="110" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-right-unit="px" data-tchmi-bottom-unit="px">


<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_6.onPressed",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%pp%AlarmData::bClearAllAlarms%/pp%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:general#/definitions/BOOL",
          "value": true
        },
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>

<div id="TcHmiButton_7" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="905" data-tchmi-left-unit="px" data-tchmi-text="Write to db" data-tchmi-top="830" data-tchmi-top-unit="px" data-tchmi-width="110" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-right-unit="px" data-tchmi-bottom-unit="px">


<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_7.onPressed",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "// Example POST method implementation:\nasync function postData(url = '', data = {}) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, *cors, same-origin\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin', // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json'\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: 'follow', // manual, *follow, error\n    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  });\n  //return response.json(); // parses JSON response into native JavaScript objects\n  return response.status\n}\n\n// testing to write to SQLite3\nlet q = 20\nfor(let i = 0; i < q; i++){\t\n\tpostData('http://127.0.0.1:4000/addrow', { sName: \"Berra\", bIsActive: 1, bIsAcknowledged: 0, sAlarmText: \"Nytt larm\", tActiveStartTime: \"2021-04-31\", tAcknowlegedTime: \"3134-67-3\",  tClearedTime: \"432-45-654\", uiRepeatCount : 43 })\n  \t\t.then(data => {\n    \t\tconsole.log(data); // JSON data parsed by `data.json()` call\n  \t\t});\n\n}\n"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>
</div>

<div id="TcHmiButton_8" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="50" data-tchmi-height-unit="px" data-tchmi-left="125" data-tchmi-left-unit="px" data-tchmi-text="Generate Alarms" data-tchmi-top="825" data-tchmi-top-unit="px" data-tchmi-width="110" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-right-unit="px" data-tchmi-bottom-unit="px">


<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_8.onPressed",
    "actions": [
      {
        "objectType": "WriteToSymbol",
        "active": true,
        "symbolExpression": "%s%PLC1.MAIN.Berra%/s%",
        "value": {
          "objectType": "StaticValue",
          "valueType": "tchmi:general#/definitions/BOOL",
          "value": true
        },
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>

</div>