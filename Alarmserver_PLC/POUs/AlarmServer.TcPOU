<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="AlarmServer" Id="{3d2cc0da-a4c3-43eb-906a-300187b5ba2d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK AlarmServer
VAR CONSTANT
	nrAlarms 			: UINT := 2000;
	//sTable 				: STRING:= '"public"."alarmlog"'; // Important to have extra " " around both DBname and table name. PostgreSQL
	sTable 				: STRING:= 'alarmlog'; // Important to have extra " " around both DBname and table name. SQLite
	//DBID				: UINT	:=1; // PostgreSQL
	DBID				: UINT	:=2; // SQLite
	
	//For read Method
	OrderByColumn		: UINT	:=1; 
	StartIndex			: UINT	:=0;
END_VAR
VAR
	init 				: BOOL:= TRUE;
	ColumnNames     	: ARRAY[0..7] OF STRING(50); // Must be set to 50 char!
	dataReturned 		: ARRAY[0..9] OF Alarms; // Array of the numbers of rows you want to store. 
	fbPLCDBWrite    	: FB_PLCDBWriteEvt(sNetID := '', tTimeout := T#5S);
	tcMessageWrite     	: I_TcMessage;
	fbPLCDBRead    		: FB_PLCDBReadEvt (sNetID := '', tTimeout := T#5S);
	tcMessage    		: I_TcMessage;
END_VAR
VAR PERSISTENT
	AlarmData			: ARRAY [0..nrAlarms] OF Alarms;
	iValueChanged 		: INT;
	irowSelected		: INT;
	bAckAlarm 			: BOOL;
	bAckAllAlarms 		: BOOL;
	bClearAllAlarms 	: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// First run, init stuff needed to work
IF init THEN
	// Set columnnames -- Must be the same as in DB
	ColumnNames[0] := 'sname';
	ColumnNames[1] := 'tactivestarttime';
	ColumnNames[2] := 'tacktime';
	ColumnNames[3] := 'tclearedtime';
	ColumnNames[4] := 'uirepeatcount';
	ColumnNames[5] := 'salarmtext';
	ColumnNames[6] := 'bisactive';
	ColumnNames[7] := 'bisacknowledged';

	init:= FALSE;
END_IF



IF(bAckAlarm) THEN
	bAckAlarm:= FALSE;
	AckAlarm(iRow:= irowSelected);
END_IF

IF(bAckAllAlarms) THEN
	bAckAllAlarms:= FALSE;
	AckAllAlarms();
END_IF

IF(bClearAllAlarms) THEN
	bClearAllAlarms:= FALSE;
	ClearAllAlarms();
END_IF

]]></ST>
    </Implementation>
    <Method Name="AckAlarm" Id="{3998354c-f7a9-4477-9dd1-1e1dd91ff7c6}">
      <Declaration><![CDATA[METHOD PUBLIC AckAlarm : BOOL
VAR_INPUT
	iRow: INT;
END_VAR

VAR
	i: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AlarmData[iRow].bIsAcknowledged:=  BOOL_TO_BYTE(TRUE);
AlarmData[iRow].tAcknowlegedTime :=  DCTIME64_TO_STRING( F_GetActualDcTime64() );

// Update variable for valuechange event
iValueChanged:= iValueChanged +1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AckAllAlarms" Id="{d37e7b81-01f0-40d0-83bf-50bc651716c7}">
      <Declaration><![CDATA[METHOD PUBLIC AckAllAlarms : BOOL
VAR
	i: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO nrAlarms BY 1 DO
	
	IF AlarmData[i].bIsUsed THEN
		
		AlarmData[i].bIsAcknowledged:=  BOOL_TO_BYTE(TRUE);
		AlarmData[i].tAcknowlegedTime :=  DCTIME64_TO_STRING( F_GetActualDcTime64() );
		// Update variable for valuechange event
		iValueChanged:= iValueChanged +1;
	END_IF	
END_FOR

]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddToDb" Id="{bacaf7d5-fbb6-464d-b066-8afef850f3b6}">
      <Declaration><![CDATA[METHOD PUBLIC AddToDb : BOOL
VAR_INPUT
	AlarmData			: Alarms;
END_VAR
VAR


	toDb				: DUT_AlarmDB;
	i:INT;

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	
toDb.sname 				:= AlarmData.sName;
toDb.tactivestarttime	:= AlarmData.tActiveStartTime;
toDb.tacktime			:= ALarmData.tAcknowlegedTime;
toDb.tclearedtime		:= AlarmData.tClearedTime;
toDb.uirepeatcount		:= AlarmData.uiRepeatCount;
toDb.salarmtext			:= AlarmData.sAlarmText;
toDb.bisactive			:= AlarmData.bIsActive;
toDb.bisacknowledged	:= AlarmData.bIsAcknowledged;


WHILE NOT fbPLCDBWrite.WriteStruct(
	hDBID:= DBID, 
	sTableName:= sTable, 
	pRecord:= ADR(toDb), 
	cbRecord:= SIZEOF(toDb), 
	pColumnNames:= ADR(ColumnNames) , 
	cbColumnNames:= SIZEOF(ColumnNames)) DO
	i:=1;
END_WHILE




(*


// Write one record to Database 
// Call Functionblock
IF fbPLCDBWrite.WriteStruct(
	hDBID:= DBID, 
	sTableName:= sTable, 
	pRecord:= ADR(toDb), 
	cbRecord:= SIZEOF(toDb), 
	pColumnNames:= ADR(ColumnNames) , 
	cbColumnNames:= SIZEOF(ColumnNames))
THEN
	IF fbPLCDBWrite.bError THEN
		tcMessageWrite := fbPLCDBWrite.ipTcResult;
	END_IF
END_IF
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearAlarm" Id="{d440acce-ec86-43aa-a3a8-423cc7466300}">
      <Declaration><![CDATA[METHOD PUBLIC ClearAlarm : BOOL
VAR_INPUT
	sName: STRING;
END_VAR

VAR
	i: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

FOR i:=0 TO nrAlarms BY 1 DO
	
	IF AlarmData[i].sName = sName THEN
		AlarmData[i].tClearedTime :=  DCTIME64_TO_STRING( F_GetActualDcTime64());
		AlarmData[i].bIsActive :=  0;
		//AlarmData[i].bIsUsed := FALSE;
		
		// Update variable for valuechange event
		iValueChanged:= iValueChanged +1;
	END_IF
	
END_FOR

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearAllAlarms" Id="{1ecd57a5-9500-4f9c-86c4-237a9ec07bd0}">
      <Declaration><![CDATA[METHOD PUBLIC ClearAllAlarms : BOOL
VAR
	i: UINT;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO nrAlarms BY 1 DO
	
	IF AlarmData[i].bIsAcknowledged = 1 THEN
		AlarmData[i].tClearedTime :=  DCTIME64_TO_STRING( F_GetActualDcTime64());
		AlarmData[i].bIsActive :=  0;
		//AlarmData[i].bIsUsed := FALSE;
		// Update variable for valuechange event
		iValueChanged:= iValueChanged +1;
	END_IF
	
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="NewAlarm" Id="{ff3e33e4-bc96-4829-912e-fd21b8af1018}">
      <Declaration><![CDATA[METHOD PUBLIC NewAlarm : BOOL
VAR_INPUT
	sName: STRING;
	sAlarmText: STRING;	
END_VAR
VAR
	Alarm: Alarms;
	i: UINT;
	bAlarmExists : BOOL;

	actDC : T_DCTIME64;
    sAct  : STRING;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Alarm.sName := sName;
Alarm.sAlarmText := sAlarmText; 
Alarm.bIsActive := 1;
Alarm.bIsUsed := TRUE;
Alarm.tClearedTime := '';

actDC := F_GetActualDcTime64();
sAct  := DCTIME64_TO_STRING( actDC );

Alarm.tActiveStartTime :=  sAct;

FOR i:=0 TO nrAlarms BY 1 DO
	
	IF (AlarmData[i].bIsUsed = TRUE AND AlarmData[i].sName = sName) THEN
		AlarmData[i].uiRepeatCount := AlarmData[i].uiRepeatCount + 1;
		AlarmData[i].tActiveStartTime := Alarm.tActiveStartTime;
		AlarmData[i].tAcknowlegedTime := '';
		AlarmData[i].tClearedTime := '';
		AlarmData[i].bIsAcknowledged := 0;
		bAlarmExists:= TRUE;
		EXIT;
	END_IF
	
END_FOR
 
IF bAlarmExists = FALSE THEN
	
	FOR i:=0 TO SIZEOF(AlarmData) - 1 BY 1 DO
		
		IF (AlarmData[i].bIsUsed = FALSE) THEN
			AlarmData[i] := Alarm;
			EXIT;	
		END_IF
		
	END_FOR
END_IF

// Update variable for valuechange event
iValueChanged:= iValueChanged +1;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadFromDB" Id="{7e1f915b-3b34-44c6-a7c3-63f4fb4fd38f}">
      <Declaration><![CDATA[METHOD PUBLIC ReadFromDB : BOOL
VAR_INPUT
	NrOfRows 			: UINT:=10;
END_VAR
VAR
	tcMessageRead	    : I_TcMessage;

	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//	Read rows from the db.  	 
IF fbPLCDBRead.ReadStruct(
	hDBID:= DBID, 
	sTableName:= sTable, 
	pColumnNames:= ADR(ColumnNames), 
	cbColumnNames:= SIZEOF(ColumnNames), 
	sOrderByColumn:= ColumnNames[OrderByColumn], 
	eOrderType:= E_OrderType.ASC, 
	nStartIndex:= StartIndex, 
	nRecordCount:= NrOfRows, 
	pData:= ADR(dataReturned), 
	cbData:= SIZEOF(dataReturned))
THEN

	IF fbPLCDBRead.bError THEN
		tcMessageRead:= fbPLCDBRead.ipTcResult;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="AlarmServer">
      <LineId Id="115" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="112" Count="2" />
      <LineId Id="108" Count="0" />
      <LineId Id="141" Count="1" />
      <LineId Id="140" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="45" Count="3" />
      <LineId Id="65" Count="3" />
      <LineId Id="18" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="150" Count="0" />
    </LineIds>
    <LineIds Name="AlarmServer.AckAlarm">
      <LineId Id="34" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="AlarmServer.AckAllAlarms">
      <LineId Id="30" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="AlarmServer.AddToDb">
      <LineId Id="59" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="64" Count="5" />
      <LineId Id="71" Count="1" />
      <LineId Id="76" Count="5" />
      <LineId Id="73" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="30" Count="10" />
      <LineId Id="50" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="AlarmServer.ClearAlarm">
      <LineId Id="44" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="70" Count="3" />
      <LineId Id="79" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="AlarmServer.ClearAllAlarms">
      <LineId Id="15" Count="2" />
      <LineId Id="57" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="22" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="AlarmServer.NewAlarm">
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="139" Count="0" />
      <LineId Id="95" Count="1" />
      <LineId Id="94" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="36" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="54" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="125" Count="0" />
    </LineIds>
    <LineIds Name="AlarmServer.ReadFromDB">
      <LineId Id="55" Count="17" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>